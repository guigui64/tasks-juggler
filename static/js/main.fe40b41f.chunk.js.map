{"version":3,"sources":["components/delete.alert.tsx","components/add.dialog.tsx","constants.tsx","components/actions.menu.tsx","components/settings.form.tsx","components/navbar.tsx","components/task.card.tsx","components/task.group.tsx","components/database.dialogs.tsx","data/database.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["DeleteAlert","deletionTargetName","alertProps","cancelButtonText","icon","intent","Intent","DANGER","canEscapeKeyCancel","canOutsideClickCancel","AddDialog","add","dialogProps","title","className","Classes","DIALOG_BODY","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","content","onClick","onClose","text","DARK_THEME","DARK","ALL_PROJECTS","ActionsMenu","openAddProjDialog","selectedProject","openDeleteProjAlert","dumpDataBase","loadDataBase","Divider","Item","disabled","console","log","SettingsForm","theme","setTheme","showOrphan","setShowOrphan","style","padding","margin","alignIndicator","Alignment","RIGHT","checked","onChange","newTheme","localStorage","setItem","prefix","newShowOrphan","String","Navbar","setSelectedProject","dataBase","projects","name","id","desc","Group","align","LEFT","Heading","fontWeight","toUpperCase","large","selectedTabId","map","p","Tab","position","Position","BOTTOM","key","minimal","TaskCard","duration","interactive","elevation","Elevation","TWO","TaskGroup","tasks","display","marginRight","marginTop","gridTemplateColumns","gridGap","filter","t","projectId","task","fileSaver","require","fileReader","FileReader","DumpDataBaseDialog","isOpen","dump","onClipboard","readOnly","width","minHeight","defaultValue","PRIMARY","document","getElementById","select","execCommand","blob","Blob","type","saveAs","LoadDataBaseDialog","onLoad","useState","input","setInput","file","setFile","loadAndClose","autoFocus","marginBottom","value","event","target","length","buttonText","inputProps","accept","multiple","e","currentTarget","hie","onload","result","readAsText","files","getNextProjectId","db","reduce","c","Math","max","App","localDB","toaster","Boolean","getItem","deleteProjAlertOpen","addProjDialogOpen","dumpDBDialogOpen","openDumpDBDialog","loadDBDialogOpen","openLoadDBDialog","localDBStr","JSON","parse","error","initialProjectId","initialTaskId","createFakeDataBase","setDataBase","updateDataBase","stringify","deleteProject","forEach","ReactDOM","createPortal","addToast","message","show","tranClass","state","ENTERING","EXITING","Transition","in","timeout","unmountOnExit","confirmButtonText","onCancel","onConfirm","find","push","addProject","SUCCESS","newDatabase","WARNING","Array","isArray","valid","reason","projectsIds","every","undefined","includes","tasksIds","validateDB","window","location","hostname","match","Toaster","create","TOP","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe40b41f.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { Alert, Intent, IAlertProps } from '@blueprintjs/core';\n\ntype DeleteAlertProps = {\n\tdeletionTargetName: string;\n} & IAlertProps;\n\nconst DeleteAlert: FC<DeleteAlertProps> = ({\n\tdeletionTargetName,\n\t...alertProps\n}) => (\n\t<Alert\n\t\tcancelButtonText='Cancel'\n\t\ticon='trash'\n\t\tintent={Intent.DANGER}\n\t\tcanEscapeKeyCancel={true}\n\t\tcanOutsideClickCancel={true}\n\t\t{...alertProps}\n\t>\n\t\t<p>{`Are you sure you want to delete ${deletionTargetName} ?`}</p>\n\t</Alert>\n);\n\nexport default DeleteAlert;\n","import React, { FC } from 'react';\nimport {\n\tDialog,\n\tClasses,\n\tTooltip,\n\tButton,\n\tIDialogProps\n} from '@blueprintjs/core';\n\ntype AddDialogProps = { add: () => void } & IDialogProps;\n\nconst AddDialog: FC<AddDialogProps> = ({ add, ...dialogProps }) => (\n\t<Dialog icon='info-sign' title='Palantir Foundry' {...dialogProps}>\n\t\t<div className={Classes.DIALOG_BODY}>\n\t\t\t<p>TODO add project form</p>\n\t\t\t{/* TODO add project form */}\n\t\t</div>\n\t\t<div className={Classes.DIALOG_FOOTER}>\n\t\t\t<div className={Classes.DIALOG_FOOTER_ACTIONS}>\n\t\t\t\t<Tooltip content='This button is hooked up to close the dialog.'>\n\t\t\t\t\t<Button onClick={dialogProps.onClose}>Close</Button>\n\t\t\t\t</Tooltip>\n\t\t\t\t<Button\n\t\t\t\t\ttext='Add'\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tadd();\n\t\t\t\t\t\tdialogProps.onClose!();\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t</Dialog>\n);\n\nexport default AddDialog;\n","import { Classes } from '@blueprintjs/core';\n\n// Blueprint\nexport const DARK_THEME = Classes.DARK;\nexport const LIGHT_THEME = '';\n\n// Local storage keys\nconst prefix = 'tasks-juggler-';\nexport const THEME_STORAGE_KEY = prefix + 'theme';\nexport const SHOW_ORPHAN_STORAGE_KEY = prefix + 'show-orphan';\nexport const DATABASE_STORAGE_KEY = prefix + 'database';\n\n// Projects\nexport const NO_PROJECT: number = -1;\nexport const ALL_PROJECTS: number = -2;\n","import React, { FC } from 'react';\nimport { Menu } from '@blueprintjs/core';\nimport { ALL_PROJECTS } from '../constants';\n\ntype ActionsMenuProps = {\n\topenAddProjDialog: (b: boolean) => void;\n\tselectedProject: number;\n\topenDeleteProjAlert: (b: boolean) => void;\n\tdumpDataBase: () => void;\n\tloadDataBase: () => void;\n};\n\nexport const ActionsMenu: FC<ActionsMenuProps> = ({\n\topenAddProjDialog,\n\tselectedProject,\n\topenDeleteProjAlert,\n\tdumpDataBase,\n\tloadDataBase\n}) => (\n\t<Menu>\n\t\t<Menu.Divider title='Projects' />\n\t\t<Menu.Item\n\t\t\ttext='Add project'\n\t\t\ticon='add'\n\t\t\tonClick={() => openAddProjDialog(true)}\n\t\t/>\n\t\t<Menu.Item\n\t\t\ttext='Edit project'\n\t\t\ticon='edit'\n\t\t\tdisabled={selectedProject === ALL_PROJECTS}\n\t\t\tonClick={() => console.log('TODO edit project')}\n\t\t\t// TODO edit project\n\t\t/>\n\t\t<Menu.Item\n\t\t\ttext='Delete project'\n\t\t\ticon='trash'\n\t\t\tintent='danger'\n\t\t\tdisabled={selectedProject === ALL_PROJECTS}\n\t\t\tonClick={() => openDeleteProjAlert(true)}\n\t\t/>\n\t\t<Menu.Divider title='Database' />\n\t\t<Menu.Item text='Dump database' icon='floppy-disk' onClick={dumpDataBase} />\n\t\t<Menu.Item text='Load database' icon='database' onClick={loadDataBase} />\n\t</Menu>\n);\n","import React, { FC } from 'react';\nimport { FormGroup, Switch, Alignment } from '@blueprintjs/core';\nimport {\n\tDARK_THEME,\n\tLIGHT_THEME,\n\tTHEME_STORAGE_KEY,\n\tSHOW_ORPHAN_STORAGE_KEY\n} from '../constants';\n\ntype SettingsFormProps = {\n\ttheme: string;\n\tsetTheme: (s: string) => void;\n\tshowOrphan: boolean;\n\tsetShowOrphan: (b: boolean) => void;\n};\n\nexport const SettingsForm: FC<SettingsFormProps> = ({\n\ttheme,\n\tsetTheme,\n\tshowOrphan,\n\tsetShowOrphan\n}) => (\n\t<FormGroup\n\t\tstyle={{\n\t\t\tpadding: '10px',\n\t\t\tmargin: '0'\n\t\t}}\n\t>\n\t\t<Switch\n\t\t\talignIndicator={Alignment.RIGHT}\n\t\t\tchecked={theme === DARK_THEME}\n\t\t\tonChange={() => {\n\t\t\t\tconst newTheme: string =\n\t\t\t\t\ttheme === LIGHT_THEME ? DARK_THEME : LIGHT_THEME;\n\t\t\t\tsetTheme(newTheme);\n\t\t\t\tlocalStorage.setItem(THEME_STORAGE_KEY, newTheme);\n\t\t\t}}\n\t\t>\n\t\t\t{(theme === LIGHT_THEME ? 'Dark' : 'Light') + ' theme'}\n\t\t</Switch>\n\t\t<Switch\n\t\t\talignIndicator={Alignment.RIGHT}\n\t\t\tchecked={showOrphan}\n\t\t\tonChange={() => {\n\t\t\t\tconst newShowOrphan: boolean = !showOrphan;\n\t\t\t\tsetShowOrphan(newShowOrphan);\n\t\t\t\tlocalStorage.setItem(SHOW_ORPHAN_STORAGE_KEY, String(newShowOrphan));\n\t\t\t}}\n\t\t>\n\t\t\t{`${showOrphan ? 'Hide' : 'Show'} orphan tasks`}\n\t\t</Switch>\n\t</FormGroup>\n);\n","import React, { FC } from 'react';\nimport {\n\tAlignment,\n\tButton,\n\tPopover,\n\tPosition,\n\tTabs,\n\tTooltip\n} from '@blueprintjs/core';\nimport { Navbar as BPNavbar } from '@blueprintjs/core';\n\nimport { ActionsMenu } from './actions.menu';\nimport { SettingsForm } from './settings.form';\nimport { ALL_PROJECTS } from '../constants';\nimport { DataBase, Project } from '../types/types';\n\ntype NavbarProps = {\n\ttheme: string;\n\tsetTheme: (s: string) => void;\n\tdumpDataBase: () => void;\n\tloadDataBase: () => void;\n\tsetSelectedProject: (p: number) => void;\n\tdataBase: DataBase;\n\tselectedProject: number;\n\topenDeleteProjAlert: (b: boolean) => void;\n\topenAddProjDialog: (b: boolean) => void;\n\tshowOrphan: boolean;\n\tsetShowOrphan: (b: boolean) => void;\n};\n\nconst Navbar: FC<NavbarProps> = ({\n\ttheme,\n\tsetTheme,\n\tdumpDataBase,\n\tloadDataBase,\n\tsetSelectedProject,\n\tdataBase,\n\tselectedProject,\n\topenDeleteProjAlert,\n\topenAddProjDialog,\n\tshowOrphan,\n\tsetShowOrphan\n}) => {\n\tconst projects: Project[] = [\n\t\t{\n\t\t\tname: 'All',\n\t\t\tid: ALL_PROJECTS,\n\t\t\tdesc: 'All the projects'\n\t\t},\n\t\t...dataBase.projects\n\t];\n\n\treturn (\n\t\t<BPNavbar>\n\t\t\t<BPNavbar.Group align={Alignment.LEFT}>\n\t\t\t\t<BPNavbar.Heading style={{ fontWeight: 'bold' }}>\n\t\t\t\t\t{'Tasks Juggler'.toUpperCase()}\n\t\t\t\t</BPNavbar.Heading>\n\t\t\t</BPNavbar.Group>\n\t\t\t<BPNavbar.Group align={Alignment.RIGHT}>\n\t\t\t\t<Tabs\n\t\t\t\t\tlarge\n\t\t\t\t\tonChange={id => {\n\t\t\t\t\t\tsetSelectedProject(id as number);\n\t\t\t\t\t}}\n\t\t\t\t\tselectedTabId={selectedProject}\n\t\t\t\t>\n\t\t\t\t\t{projects.map((p: Project) => (\n\t\t\t\t\t\t<Tabs.Tab\n\t\t\t\t\t\t\ttitle={\n\t\t\t\t\t\t\t\t<Tooltip content={p.desc} position={Position.BOTTOM}>\n\t\t\t\t\t\t\t\t\t{p.name.toUpperCase()}\n\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tid={p.id}\n\t\t\t\t\t\t\tkey={p.id}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</Tabs>\n\t\t\t\t<BPNavbar.Divider />\n\t\t\t\t<Popover\n\t\t\t\t\tcontent={\n\t\t\t\t\t\t<ActionsMenu\n\t\t\t\t\t\t\t{...{\n\t\t\t\t\t\t\t\topenAddProjDialog,\n\t\t\t\t\t\t\t\tselectedProject,\n\t\t\t\t\t\t\t\topenDeleteProjAlert,\n\t\t\t\t\t\t\t\tdumpDataBase,\n\t\t\t\t\t\t\t\tloadDataBase\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t}\n\t\t\t\t\tposition={Position.BOTTOM}\n\t\t\t\t>\n\t\t\t\t\t<Button minimal icon='build' text='Actions' />\n\t\t\t\t</Popover>\n\t\t\t\t<Popover\n\t\t\t\t\tcontent={\n\t\t\t\t\t\t<SettingsForm {...{ theme, setTheme, showOrphan, setShowOrphan }} />\n\t\t\t\t\t}\n\t\t\t\t\tposition={Position.BOTTOM}\n\t\t\t\t>\n\t\t\t\t\t<Button minimal icon='cog' text='Settings' />\n\t\t\t\t</Popover>\n\t\t\t</BPNavbar.Group>\n\t\t</BPNavbar>\n\t);\n};\n\nexport default Navbar;\n","import React, { FC } from 'react';\nimport { Card, Elevation } from '@blueprintjs/core';\n\ntype TaskCardProps = {\n\ttitle: string;\n\tdesc: string;\n\tduration?: number;\n};\n\nconst TaskCard: FC<TaskCardProps> = ({ title, desc, duration }) => (\n\t<Card\n\t\tinteractive={true}\n\t\televation={Elevation.TWO}\n\t\tclassName='animated fadeIn fast' // TODO fadeOut when deleting\n\t>\n\t\t<h3>{title}</h3>\n\t\t<p>{desc}</p>\n\t\t{duration && <p>{`${duration} day(s)`}</p>}\n\t</Card>\n);\n\nexport default TaskCard;\n","import React, { FC } from 'react';\nimport { Task } from '../types/types';\nimport { ALL_PROJECTS, NO_PROJECT } from '../constants';\nimport TaskCard from './task.card';\nimport { H3, ButtonGroup, Button } from '@blueprintjs/core';\n\ntype TaskGroupProps = {\n\ttitle: string;\n\ttasks: Task[];\n\tselectedProject: number;\n};\n\nconst TaskGroup: FC<TaskGroupProps> = ({ title, tasks, selectedProject }) => (\n\t<div style={{ padding: '50px 50px 0 50px' }}>\n\t\t<div style={{ display: 'inline' }}>\n\t\t\t<H3 style={{ display: 'inline-block', marginRight: '10px' }}>{title}</H3>\n\t\t\t<ButtonGroup>\n\t\t\t\t{/* TODO add and delete task */}\n\t\t\t\t<Button\n\t\t\t\t\ttext='Add task'\n\t\t\t\t\ticon='add'\n\t\t\t\t\tonClick={() => console.log('TODO add task')}\n\t\t\t\t/>\n\t\t\t\t<Button\n\t\t\t\t\ttext='Delete tasks'\n\t\t\t\t\ticon='trash'\n\t\t\t\t\tonClick={() => console.log('TODO delete tasks')}\n\t\t\t\t/>\n\t\t\t</ButtonGroup>\n\t\t</div>\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\tmarginTop: '10px',\n\t\t\t\tdisplay: 'grid',\n\t\t\t\tgridTemplateColumns: 'repeat(auto-fill, minmax(250px, 1fr))',\n\t\t\t\tgridGap: '10px'\n\t\t\t}}\n\t\t>\n\t\t\t{tasks\n\t\t\t\t.filter(\n\t\t\t\t\tt =>\n\t\t\t\t\t\tt.projectId === selectedProject ||\n\t\t\t\t\t\t(selectedProject === ALL_PROJECTS && t.projectId !== NO_PROJECT)\n\t\t\t\t)\n\t\t\t\t.map(task => {\n\t\t\t\t\tlet { title, desc, duration, id } = task;\n\t\t\t\t\treturn <TaskCard {...{ title, desc, duration }} key={id} />;\n\t\t\t\t})}\n\t\t</div>\n\t</div>\n);\n\nexport default TaskGroup;\n\n// TODO animation when showing/hiding tasks group\n","import React, { FC, useState } from 'react';\nimport {\n\tDialog,\n\tClasses,\n\tButton,\n\tTextArea,\n\tIntent,\n\tIDialogProps,\n\tFileInput\n} from '@blueprintjs/core';\n\nconst fileSaver = require('file-saver');\nconst fileReader = new FileReader();\n\ntype DumpDataBaseDialogProps = {\n\tdump: string;\n\tonClipboard: () => void;\n} & IDialogProps;\n\nexport const DumpDataBaseDialog: FC<DumpDataBaseDialogProps> = ({\n\tisOpen,\n\tonClose,\n\tdump,\n\tonClipboard\n}) => (\n\t<Dialog\n\t\ticon='database'\n\t\ttitle='DataBase dump'\n\t\tisOpen={isOpen}\n\t\tonClose={onClose}\n\t>\n\t\t<div className={Classes.DIALOG_BODY}>\n\t\t\t<p>Copy to clipboard or save it to your files :</p>\n\t\t\t<TextArea\n\t\t\t\tid='dump'\n\t\t\t\treadOnly\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: '100%',\n\t\t\t\t\tminHeight: '300px'\n\t\t\t\t}}\n\t\t\t\tdefaultValue={dump}\n\t\t\t/>\n\t\t</div>\n\t\t<div className={Classes.DIALOG_FOOTER}>\n\t\t\t<div className={Classes.DIALOG_FOOTER_ACTIONS}>\n\t\t\t\t<Button\n\t\t\t\t\ttext='Copy to clipboard'\n\t\t\t\t\ticon='clipboard'\n\t\t\t\t\tintent={Intent.PRIMARY}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t// Copy to clipboard\n\t\t\t\t\t\t(document.getElementById('dump') as HTMLTextAreaElement).select();\n\t\t\t\t\t\tdocument.execCommand('copy');\n\t\t\t\t\t\t// Display toaster\n\t\t\t\t\t\tonClipboard();\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<Button\n\t\t\t\t\ttext='Download as JSON'\n\t\t\t\t\ticon='download'\n\t\t\t\t\tintent={Intent.PRIMARY}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tconst blob = new Blob([dump], { type: 'text/plain;charset=utf-8' });\n\t\t\t\t\t\tfileSaver.saveAs(blob, 'tasks-juggler-db.json');\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t</Dialog>\n);\n\ntype LoadDataBaseDialogProps = {\n\tonLoad: (input: string) => boolean;\n} & IDialogProps;\n\nexport const LoadDataBaseDialog: FC<LoadDataBaseDialogProps> = ({\n\tisOpen,\n\tonClose,\n\tonLoad\n}) => {\n\tconst [input, setInput] = useState('');\n\tconst [file, setFile] = useState('');\n\n\tconst loadAndClose = (input: string) => {\n\t\tif (onLoad(input)) {\n\t\t\tonClose!();\n\t\t}\n\t};\n\treturn (\n\t\t<Dialog\n\t\t\ticon='database'\n\t\t\ttitle='DataBase dump'\n\t\t\tisOpen={isOpen}\n\t\t\tonClose={onClose}\n\t\t>\n\t\t\t<div className={Classes.DIALOG_BODY}>\n\t\t\t\t<p>Copy your database in the following area and click on 'Load' :</p>\n\t\t\t\t<TextArea\n\t\t\t\t\tautoFocus\n\t\t\t\t\tid='dump'\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t\tminHeight: '100px',\n\t\t\t\t\t\tmarginBottom: '10px'\n\t\t\t\t\t}}\n\t\t\t\t\tvalue={input}\n\t\t\t\t\tonChange={event => setInput(event.target.value)}\n\t\t\t\t/>\n\t\t\t\t<div className={Classes.DIALOG_FOOTER_ACTIONS}>\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttext='Load'\n\t\t\t\t\t\tdisabled={input.length === 0}\n\t\t\t\t\t\ticon='upload'\n\t\t\t\t\t\tintent={Intent.PRIMARY}\n\t\t\t\t\t\tonClick={() => loadAndClose(input)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className={Classes.DIALOG_FOOTER}>\n\t\t\t\t<p>OR load from your files :</p>\n\t\t\t\t<div className={Classes.DIALOG_FOOTER_ACTIONS}>\n\t\t\t\t\t<FileInput\n\t\t\t\t\t\ttext={file || 'Choose JSON file'}\n\t\t\t\t\t\tbuttonText={'Browse'}\n\t\t\t\t\t\tinputProps={{\n\t\t\t\t\t\t\tid: 'file-input',\n\t\t\t\t\t\t\taccept: '.json',\n\t\t\t\t\t\t\tmultiple: false,\n\t\t\t\t\t\t\tonChange: e => setFile(e.currentTarget.value)\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttext='Load from a file'\n\t\t\t\t\t\ticon='folder-open'\n\t\t\t\t\t\tintent={Intent.PRIMARY}\n\t\t\t\t\t\tdisabled={file === ''}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tconst hie = document.getElementById(\n\t\t\t\t\t\t\t\t'file-input'\n\t\t\t\t\t\t\t) as HTMLInputElement;\n\t\t\t\t\t\t\tfileReader.onload = () => {\n\t\t\t\t\t\t\t\tloadAndClose(fileReader.result as string);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tfileReader.readAsText(hie.files![0]);\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Dialog>\n\t);\n};\n","import { DataBase } from '../types/types';\n\nimport { NO_PROJECT } from '../constants';\n\nexport const createFakeDataBase: () => DataBase = () => {\n\tlet initialProjectId = 0;\n\tlet initialTaskId = 0;\n\tconst initialDataBase: DataBase = {\n\t\tprojects: [\n\t\t\t{ name: 'Toto', desc: 'toto project', id: initialProjectId++ },\n\t\t\t{ name: 'Titi', desc: 'titi project', id: initialProjectId++ }\n\t\t],\n\t\ttasks: [\n\t\t\t{\n\t\t\t\ttitle: 'ZombieTask',\n\t\t\t\tdesc: 'I have no project...',\n\t\t\t\tid: initialTaskId++,\n\t\t\t\tprojectId: NO_PROJECT,\n\t\t\t\tduration: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'TotoTask1',\n\t\t\t\tdesc: 'task 1 of toto project',\n\t\t\t\tid: initialTaskId++,\n\t\t\t\tprojectId: 0,\n\t\t\t\tduration: 0.5\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'TotoTask2',\n\t\t\t\tdesc: 'task 2 of toto project',\n\t\t\t\tid: initialTaskId++,\n\t\t\t\tprojectId: 0,\n\t\t\t\tduration: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'TitiTask',\n\t\t\t\tdesc: 'task 1 of titi project',\n\t\t\t\tid: initialTaskId++,\n\t\t\t\tprojectId: 1,\n\t\t\t\tduration: 1\n\t\t\t}\n\t\t]\n\t};\n\treturn initialDataBase;\n};\n\nexport const validateDB: (\n\tdb: any\n) => { valid: boolean; reason?: string } = db => {\n\tif (typeof db !== 'object' || Array.isArray(db)) {\n\t\treturn { valid: false, reason: 'Imported DB is not an object' };\n\t}\n\tlet projectsIds: number[] = [];\n\tif (db.projects) {\n\t\tif (Array.isArray(db.projects)) {\n\t\t\tif (\n\t\t\t\t!(db.projects as any[]).every(p => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tp.name !== undefined &&\n\t\t\t\t\t\ttypeof p.name === 'string' &&\n\t\t\t\t\t\tp.desc !== undefined &&\n\t\t\t\t\t\ttypeof p.desc === 'string' &&\n\t\t\t\t\t\tp.id !== undefined &&\n\t\t\t\t\t\ttypeof p.id === 'number'\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!projectsIds.includes(p.id)) {\n\t\t\t\t\t\t\tprojectsIds.push(p.id);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t})\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\treason: 'Imported DB projects are not correctly formed'\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\treturn { valid: false, reason: \"Imported DB 'projects' is not an array\" };\n\t\t}\n\t} else {\n\t\treturn { valid: false, reason: \"Imported DB has no 'projects' child\" };\n\t}\n\tprojectsIds.push(NO_PROJECT);\n\tlet tasksIds: number[] = [];\n\tif (db.tasks) {\n\t\tif (Array.isArray(db.tasks)) {\n\t\t\tif (\n\t\t\t\t!(db.tasks as any[]).every(t => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tt.title !== undefined &&\n\t\t\t\t\t\ttypeof t.title === 'string' &&\n\t\t\t\t\t\tt.desc !== undefined &&\n\t\t\t\t\t\ttypeof t.desc === 'string' &&\n\t\t\t\t\t\tt.id !== undefined &&\n\t\t\t\t\t\ttypeof t.id === 'number' &&\n\t\t\t\t\t\tt.projectId !== undefined &&\n\t\t\t\t\t\ttypeof t.projectId === 'number' &&\n\t\t\t\t\t\tt.duration !== undefined &&\n\t\t\t\t\t\ttypeof t.duration === 'number'\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (tasksIds.includes(t.id)) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttasksIds.push(t.id);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!projectsIds.includes(t.projectId)) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t})\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\treason: 'Imported DB tasks are not correctly formed'\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\treturn { valid: false, reason: \"Imported DB 'tasks' is not an array\" };\n\t\t}\n\t} else {\n\t\treturn { valid: false, reason: \"Imported DB has no 'tasks' child\" };\n\t}\n\treturn { valid: true };\n};\n\nexport const getNextProjectId: (db: DataBase) => number = db => {\n\treturn db.projects.map(p => p.id).reduce((p, c) => Math.max(p, c)) + 1;\n};\n\nexport const getNextTaskId: (db: DataBase, projectId: number) => number = (\n\tdb,\n\tprojectId\n) => {\n\treturn (\n\t\tdb.tasks\n\t\t\t.filter(t => t.projectId === projectId)\n\t\t\t.map(t => t.id)\n\t\t\t.reduce((p, c) => Math.max(p, c)) + 1\n\t);\n};\n","import React, { useState, FC } from 'react';\nimport { H3, IIntentProps, Intent, IToaster } from '@blueprintjs/core';\n\nimport './App.css';\n\nimport DeleteAlert from './components/delete.alert';\nimport AddDialog from './components/add.dialog';\nimport Navbar from './components/navbar';\n\nimport {\n\tALL_PROJECTS,\n\tLIGHT_THEME,\n\tNO_PROJECT,\n\tTHEME_STORAGE_KEY,\n\tSHOW_ORPHAN_STORAGE_KEY,\n\tDATABASE_STORAGE_KEY\n} from './constants';\nimport { DataBase, Project, Task } from './types/types';\nimport TaskGroup from './components/task.group';\nimport {\n\tDumpDataBaseDialog,\n\tLoadDataBaseDialog\n} from './components/database.dialogs';\nimport ReactDOM from 'react-dom';\nimport {\n\tcreateFakeDataBase,\n\tvalidateDB,\n\tgetNextProjectId\n} from './data/database';\nimport { Transition } from 'react-transition-group';\nimport {\n\tENTERING,\n\tEXITING,\n\tTransitionStatus\n} from 'react-transition-group/Transition';\n\ntype AppProps = {\n\ttoaster: IToaster;\n};\n\nconst App: FC<AppProps> = ({ toaster }) => {\n\t// Settings states\n\tconst [showOrphan, setShowOrphan] = useState(\n\t\tBoolean(localStorage.getItem(SHOW_ORPHAN_STORAGE_KEY) || false)\n\t);\n\tconst [theme, setTheme] = useState(\n\t\tlocalStorage.getItem(THEME_STORAGE_KEY) || LIGHT_THEME\n\t);\n\n\t// Overlays states\n\tconst [deleteProjAlertOpen, openDeleteProjAlert] = useState(false);\n\tconst [addProjDialogOpen, openAddProjDialog] = useState(false);\n\tconst [dumpDBDialogOpen, openDumpDBDialog] = useState(false);\n\tconst [loadDBDialogOpen, openLoadDBDialog] = useState(false);\n\n\t// Data states\n\tconst localDBStr = localStorage.getItem(DATABASE_STORAGE_KEY);\n\tlet localDB: DataBase | undefined;\n\tif (localDBStr) {\n\t\ttry {\n\t\t\tlocalDB = JSON.parse(localDBStr);\n\t\t} catch (error) {}\n\t}\n\tconst [dataBase, setDataBase] = useState(localDB || createFakeDataBase());\n\tconst updateDataBase = (db: DataBase) => {\n\t\tsetDataBase(db);\n\t\tlocalStorage.setItem(DATABASE_STORAGE_KEY, JSON.stringify(db));\n\t};\n\tconst [selectedProject, setSelectedProject] = useState(ALL_PROJECTS);\n\n\tconst addProject = (name: string) => {\n\t\tconst projectId = getNextProjectId(dataBase);\n\t\tdataBase.projects.push({\n\t\t\tname: name,\n\t\t\tdesc: '',\n\t\t\tid: projectId\n\t\t});\n\t\tupdateDataBase(dataBase);\n\t\tsetSelectedProject(projectId);\n\t};\n\n\tconst deleteProject = (projectId: number) => {\n\t\tdataBase.projects = dataBase.projects.filter(\n\t\t\t(p: Project) => p.id !== projectId\n\t\t);\n\t\tdataBase.tasks.forEach(\n\t\t\t(t: Task) => t.projectId === projectId && (t.projectId = NO_PROJECT)\n\t\t);\n\t\tupdateDataBase(dataBase);\n\t\tsetSelectedProject(ALL_PROJECTS);\n\t};\n\n\tReactDOM.createPortal(toaster, document.getElementById('root')!);\n\tconst addToast = (message: string, intent: IIntentProps['intent']) => {\n\t\ttoaster.show({ message, intent });\n\t};\n\n\t// TODO move it in taskgroup\n\tconst tranClass = (state: TransitionStatus) => {\n\t\tswitch (state) {\n\t\t\tcase ENTERING:\n\t\t\t\treturn 'animated fadeInDown fast';\n\t\t\tcase EXITING:\n\t\t\t\treturn 'animated fadeOutUp fast';\n\t\t\tdefault:\n\t\t\t\treturn '';\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className={theme} id='container'>\n\t\t\t<Navbar\n\t\t\t\tdumpDataBase={() => openDumpDBDialog(true)}\n\t\t\t\tloadDataBase={() => openLoadDBDialog(true)}\n\t\t\t\t{...{\n\t\t\t\t\ttheme,\n\t\t\t\t\tsetTheme,\n\t\t\t\t\tsetSelectedProject,\n\t\t\t\t\tdataBase,\n\t\t\t\t\tdeleteProject,\n\t\t\t\t\tselectedProject,\n\t\t\t\t\topenDeleteProjAlert,\n\t\t\t\t\topenAddProjDialog,\n\t\t\t\t\tshowOrphan,\n\t\t\t\t\tsetShowOrphan\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<TaskGroup\n\t\t\t\ttitle='Tasks'\n\t\t\t\ttasks={dataBase.tasks}\n\t\t\t\tselectedProject={selectedProject}\n\t\t\t/>\n\t\t\t<Transition in={showOrphan} timeout={800} unmountOnExit>\n\t\t\t\t{state => (\n\t\t\t\t\t<div className={tranClass(state)}>\n\t\t\t\t\t\t<TaskGroup\n\t\t\t\t\t\t\ttitle='Orphan tasks'\n\t\t\t\t\t\t\ttasks={dataBase.tasks}\n\t\t\t\t\t\t\tselectedProject={NO_PROJECT}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</Transition>\n\t\t\t<div style={{ padding: '50px 50px 0 50px' }}>\n\t\t\t\t<div style={{ display: 'inline' }}>\n\t\t\t\t\t<H3 style={{ display: 'inline-block', marginRight: '10px' }}>\n\t\t\t\t\t\tPlanning\n\t\t\t\t\t</H3>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{/* Overlays : */}\n\t\t\t<DeleteAlert\n\t\t\t\tconfirmButtonText='Delete project'\n\t\t\t\tisOpen={deleteProjAlertOpen}\n\t\t\t\tonCancel={() => openDeleteProjAlert(false)}\n\t\t\t\tonConfirm={() => {\n\t\t\t\t\topenDeleteProjAlert(false);\n\t\t\t\t\tdeleteProject(selectedProject);\n\t\t\t\t}}\n\t\t\t\tdeletionTargetName={\n\t\t\t\t\tselectedProject === ALL_PROJECTS\n\t\t\t\t\t\t? 'ALL => IMPOSSIBLE'\n\t\t\t\t\t\t: dataBase.projects.find((p: Project) => p.id === selectedProject)!\n\t\t\t\t\t\t\t\t.name\n\t\t\t\t}\n\t\t\t/>\n\t\t\t<AddDialog\n\t\t\t\tisOpen={addProjDialogOpen}\n\t\t\t\tonClose={() => openAddProjDialog(false)}\n\t\t\t\tadd={() => addProject('Test' + getNextProjectId(dataBase))}\n\t\t\t\t// TODO project name\n\t\t\t/>\n\t\t\t<DumpDataBaseDialog\n\t\t\t\tisOpen={dumpDBDialogOpen}\n\t\t\t\tonClose={() => openDumpDBDialog(false)}\n\t\t\t\tdump={JSON.stringify(dataBase, null, '\\t')}\n\t\t\t\tonClipboard={() => addToast('Copied to clipboard !', Intent.SUCCESS)}\n\t\t\t/>\n\t\t\t<LoadDataBaseDialog\n\t\t\t\tisOpen={loadDBDialogOpen}\n\t\t\t\tonClose={() => openLoadDBDialog(false)}\n\t\t\t\tonLoad={(input: string) => {\n\t\t\t\t\tlet newDatabase: any | undefined;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tnewDatabase = JSON.parse(input);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\taddToast('Imported DB format is not correct', Intent.WARNING);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tconst { valid, reason } = validateDB(newDatabase);\n\t\t\t\t\tif (!valid) {\n\t\t\t\t\t\taddToast(reason!, Intent.WARNING);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tupdateDataBase(newDatabase);\n\t\t\t\t\taddToast('DB successfully imported', Intent.SUCCESS);\n\t\t\t\t\treturn true;\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default App;\n\n// TODO document + comment code\n// TODO tests\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Toaster, Position } from '@blueprintjs/core';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'animate.css';\nimport 'normalize.css';\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\nimport '@blueprintjs/datetime/lib/css/blueprint-datetime.css';\n\nimport './index.css';\n\nconst toaster = Toaster.create({\n\tposition: Position.TOP\n});\nReactDOM.render(<App toaster={toaster} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}