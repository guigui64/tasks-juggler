{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["initialProjectId","initialTaskId","initialDataBase","projects","name","desc","id","tasks","title","projectId","duration","App","_useState","useState","_useState2","Object","slicedToArray","projectInputField","setProjectInputField","_useState3","_useState4","setProjectId","_useState5","_useState6","_useState7","_useState8","selectedProject","setSelectedProject","_useState9","_useState10","database","setDatabase","_useState11","_useState12","showOrphan","setShowOrphan","react_default","a","createElement","Fragment","onClick","console","log","type","onChange","event","target","value","push","map","project","style","cursor","fontWeight","key","filter","t","task","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.503bd4eb.chunk.js","sourcesContent":["import React, { Component, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst NO_PROJECT = -1;\nconst ALL_PROJECTS = -2;\nconst NO_SELECTION = -3;\n\ninterface DataBase {\n  projects: Project[];\n  tasks: Task[];\n}\ninterface Project {\n  name: string;\n  desc: string;\n  id: number;\n}\n\ninterface Task {\n  title: string;\n  desc: string;\n  id: number;\n  projectId: number;\n  duration: number; // in days\n}\n\nlet initialProjectId = 0;\nlet initialTaskId = 0;\nconst initialDataBase: DataBase = {\n  projects: [\n    { name: 'Toto', desc: 'toto project', id: initialProjectId++ },\n    { name: 'Titi', desc: 'titi project', id: initialProjectId++ }\n  ],\n  tasks: [\n    {\n      title: 'ZombieTask',\n      desc: 'I have no project...',\n      id: initialTaskId++,\n      projectId: NO_PROJECT,\n      duration: 1\n    },\n    {\n      title: 'TotoTask1',\n      desc: 'task 1 of toto project',\n      id: initialTaskId++,\n      projectId: 0,\n      duration: 0.5\n    },\n    {\n      title: 'TotoTask2',\n      desc: 'task 2 of toto project',\n      id: initialTaskId++,\n      projectId: 0,\n      duration: 1\n    },\n    {\n      title: 'TitiTask',\n      desc: 'task 1 of titi project',\n      id: initialTaskId++,\n      projectId: 1,\n      duration: 1\n    }\n  ]\n};\n\nconst App = () => {\n  const [projectInputField, setProjectInputField] = useState('');\n  const [projectId, setProjectId] = useState(initialProjectId);\n  const [taskId, setTaskId] = useState(initialTaskId);\n  const [selectedProject, setSelectedProject] = useState(NO_SELECTION);\n  const [database, setDatabase] = useState(initialDataBase);\n  const [showOrphan, setShowOrphan] = useState(false);\n\n  const addProject = () => {\n    database.projects.push({\n      name: projectInputField,\n      desc: '',\n      id: projectId\n    });\n    setDatabase(database);\n    setProjectId(projectId + 1);\n    setProjectInputField('');\n  };\n\n  return (\n    <>\n      <h1>Tasks Juggler</h1>\n      <button onClick={() => console.log(database)}>Dump database</button>\n      <h2>\n        Projects\n        <button onClick={() => setSelectedProject(ALL_PROJECTS)}>\n          Select all\n        </button>\n      </h2>\n      <input\n        type='textfield'\n        onChange={event => setProjectInputField(event.target.value)}\n        value={projectInputField}\n      />\n      <button onClick={addProject}>Add project</button>\n      <ul>\n        {database.projects.map(project => {\n          let style: any = { cursor: 'pointer' };\n          if (\n            ALL_PROJECTS === selectedProject ||\n            project.id === selectedProject\n          )\n            style.fontWeight = 'bold';\n\n          return (\n            <li key={project.id} style={style}>\n              <a\n                onClick={() => {\n                  setSelectedProject(project.id);\n                }}\n              >\n                {project.name}\n                <small> {project.desc}</small>\n              </a>\n            </li>\n          );\n        })}\n      </ul>\n      <h2>Tasks</h2>\n      <ul>\n        {database.tasks\n          .filter(\n            t =>\n              t.projectId === selectedProject ||\n              (selectedProject === ALL_PROJECTS && t.projectId !== NO_PROJECT)\n          )\n          .map(task => (\n            <li key={task.id}>\n              {task.title}\n              <small>\n                {' '}\n                {task.desc} -- ({task.duration} days)\n              </small>\n            </li>\n          ))}\n      </ul>\n      <h3>\n        Orphan tasks\n        <button onClick={() => setShowOrphan(!showOrphan)}>\n          {showOrphan ? 'Hide' : 'Show'}\n        </button>\n      </h3>\n      {showOrphan && (\n        <ul>\n          {database.tasks\n            .filter(t => t.projectId === NO_PROJECT)\n            .map(task => (\n              <li key={task.id}>\n                {task.title}\n                <small>\n                  {' '}\n                  {task.desc} -- ({task.duration} days)\n                </small>\n              </li>\n            ))}\n        </ul>\n      )}\n      <h2>Planning</h2>\n      {/* TODO planning, save/load database (JSON, localstorage...), styles */}\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}