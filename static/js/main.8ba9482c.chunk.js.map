{"version":3,"sources":["components/deletealert.tsx","components/adddialog.tsx","constants.tsx","components/navbar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["isOpen","onCancel","onConfirm","confirmButtonText","deletionTargetName","cancelButtonText","icon","intent","Intent","DANGER","canEscapeKeyCancel","canOutsideClickCancel","handleClose","handleConfirm","onClose","title","className","Classes","DIALOG_BODY","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","content","onClick","text","DARK_THEME","DARK","ALL_PROJECTS","theme","switchTheme","dumpDataBase","setSelectedProject","projects","selectedProject","openDeleteProjAlert","openAddProjDialog","settingsMenu","Item","Divider","disabled","actionsMenu","Group","align","Alignment","LEFT","Heading","RIGHT","large","onChange","id","selectedTabId","map","p","Tab","name","position","Position","BOTTOM","minimal","initialProjectId","initialTaskId","initialDataBase","desc","tasks","projectId","duration","App","useState","setProjectId","database","setDatabase","showOrphan","setShowOrphan","localStorage","getItem","setTheme","projToDisplay","setProjToDisplay","deleteProjAlertOpen","addProjDialogOpen","deleteProject","filter","forEach","t","deleteProjectAlert","find","addProjectDialog","push","newTheme","setItem","setLocalTheme","console","log","task","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8ba9482c.chunk.js","sourcesContent":["import React from 'react';\nimport { Alert, Intent } from '@blueprintjs/core';\n\nexport default ({\n  isOpen,\n  onCancel,\n  onConfirm,\n  confirmButtonText,\n  deletionTargetName\n}: any) => (\n  <Alert\n    cancelButtonText='Cancel'\n    confirmButtonText={confirmButtonText}\n    icon='trash'\n    intent={Intent.DANGER}\n    isOpen={isOpen}\n    onCancel={onCancel}\n    onConfirm={onConfirm}\n    canEscapeKeyCancel={true}\n    canOutsideClickCancel={true}\n  >\n    <p>{`Are you sure you want to delete ${deletionTargetName} ?`}</p>\n  </Alert>\n);\n","import React from 'react';\nimport { Dialog, Classes, Tooltip, Button } from '@blueprintjs/core';\n\nexport default ({ isOpen, handleClose, handleConfirm }: any) => (\n  <Dialog\n    isOpen={isOpen}\n    icon='info-sign'\n    onClose={handleClose}\n    title='Palantir Foundry'\n  >\n    <div className={Classes.DIALOG_BODY}>\n      <p>TODO add form</p>\n    </div>\n    <div className={Classes.DIALOG_FOOTER}>\n      <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n        <Tooltip content='This button is hooked up to close the dialog.'>\n          <Button onClick={handleClose}>Close</Button>\n        </Tooltip>\n        <Button\n          text='Add'\n          onClick={() => {\n            handleConfirm();\n            handleClose();\n          }}\n        />\n      </div>\n    </div>\n  </Dialog>\n);\n","import { Classes } from '@blueprintjs/core';\n\n// Blueprint\nexport const DARK_THEME = Classes.DARK;\nexport const LIGHT_THEME = '';\n\n// Local storage keys\nexport const THEME_STORAGE_KEY = 'tasks-juggler-theme';\n\n// Projects\nexport const NO_PROJECT: number = -1;\nexport const ALL_PROJECTS: number = -2;\n","import React from 'react';\nimport {\n  Alignment,\n  Button,\n  Menu,\n  Navbar,\n  Popover,\n  Position,\n  Tabs\n} from '@blueprintjs/core';\n\nimport { ALL_PROJECTS, LIGHT_THEME } from '../constants';\n\nexport default ({\n  theme,\n  switchTheme,\n  dumpDataBase,\n  setSelectedProject,\n  projects,\n  selectedProject,\n  openDeleteProjAlert,\n  openAddProjDialog\n}: any) => {\n  const settingsMenu = (\n    <Menu>\n      <Menu.Item\n        text={(theme === LIGHT_THEME ? 'Dark' : 'Light') + ' theme'}\n        icon={theme === LIGHT_THEME ? 'moon' : 'flash'}\n        onClick={switchTheme}\n      />\n      <Menu.Divider />\n      <Menu.Item\n        text='Dump database'\n        icon='floppy-disk'\n        onClick={dumpDataBase}\n      />\n      <Menu.Item text='TODO' icon='lock' disabled />\n    </Menu>\n  );\n\n  const actionsMenu = (\n    <Menu>\n      <Menu.Divider title='Projects' />\n      <Menu.Item\n        text='Add project'\n        icon='add'\n        onClick={() => openAddProjDialog(true)}\n      />\n      <Menu.Item\n        text='Delete current project'\n        icon='trash'\n        intent='danger'\n        disabled={selectedProject === ALL_PROJECTS}\n        onClick={() => openDeleteProjAlert(true)}\n      />\n      <Menu.Divider title='Tasks' />\n      <Menu.Item text='Add task' icon='add' />\n    </Menu>\n  );\n\n  return (\n    <Navbar>\n      <Navbar.Group align={Alignment.LEFT}>\n        <Navbar.Heading>Tasks Juggler</Navbar.Heading>\n      </Navbar.Group>\n      <Navbar.Group align={Alignment.RIGHT}>\n        <Tabs\n          large\n          onChange={id => {\n            setSelectedProject(id);\n          }}\n          selectedTabId={selectedProject}\n        >\n          {projects.map((p: { name: string; id: number }) => (\n            <Tabs.Tab title={p.name} id={p.id} />\n          ))}\n        </Tabs>\n        <Navbar.Divider />\n        <Popover content={actionsMenu} position={Position.BOTTOM}>\n          <Button minimal icon='menu' text='Actions' />\n        </Popover>\n        <Popover content={settingsMenu} position={Position.BOTTOM}>\n          <Button minimal icon='cog' text='Settings' />\n        </Popover>\n      </Navbar.Group>\n    </Navbar>\n  );\n};\n","import React, { useState } from 'react';\nimport { Button } from '@blueprintjs/core';\n\nimport './App.css';\n\nimport DeleteAlert from './components/deletealert';\nimport AddDialog from './components/adddialog';\nimport Navbar from './components/navbar';\n\nimport {\n  ALL_PROJECTS,\n  DARK_THEME,\n  LIGHT_THEME,\n  NO_PROJECT,\n  THEME_STORAGE_KEY\n} from './constants';\nimport { DataBase, Project, Task } from './types/types';\n\nlet initialProjectId = 0;\nlet initialTaskId = 0;\nconst initialDataBase: DataBase = {\n  projects: [\n    { name: 'Toto', desc: 'toto project', id: initialProjectId++ },\n    { name: 'Titi', desc: 'titi project', id: initialProjectId++ }\n  ],\n  tasks: [\n    {\n      title: 'ZombieTask',\n      desc: 'I have no project...',\n      id: initialTaskId++,\n      projectId: NO_PROJECT,\n      duration: 1\n    },\n    {\n      title: 'TotoTask1',\n      desc: 'task 1 of toto project',\n      id: initialTaskId++,\n      projectId: 0,\n      duration: 0.5\n    },\n    {\n      title: 'TotoTask2',\n      desc: 'task 2 of toto project',\n      id: initialTaskId++,\n      projectId: 0,\n      duration: 1\n    },\n    {\n      title: 'TitiTask',\n      desc: 'task 1 of titi project',\n      id: initialTaskId++,\n      projectId: 1,\n      duration: 1\n    }\n  ]\n};\n\nconst setLocalTheme = (theme: string) => {\n  localStorage.setItem(THEME_STORAGE_KEY, theme);\n};\n\nconst getLocalTheme = (): string | null => {\n  return localStorage.getItem(THEME_STORAGE_KEY);\n};\n\nconst App = () => {\n  const [projectId, setProjectId] = useState(initialProjectId);\n  // const [taskId, setTaskId] = useState(initialTaskId);\n  const [selectedProject, setSelectedProject] = useState(ALL_PROJECTS);\n  const [database, setDatabase] = useState(initialDataBase);\n  const [showOrphan, setShowOrphan] = useState(false);\n\n  const [theme, setTheme] = useState(getLocalTheme() || LIGHT_THEME);\n  const switchTheme = () => {\n    const newTheme = theme === LIGHT_THEME ? DARK_THEME : LIGHT_THEME;\n    setTheme(newTheme);\n    setLocalTheme(newTheme);\n  };\n\n  const [projToDisplay, setProjToDisplay] = useState([\n    {\n      name: 'All',\n      id: ALL_PROJECTS\n    },\n    ...database.projects.map(p => ({ name: p.name, id: p.id }))\n  ]);\n  const [deleteProjAlertOpen, openDeleteProjAlert] = useState(false);\n  const [addProjDialogOpen, openAddProjDialog] = useState(false);\n\n  const addProject = (name: string) => {\n    database.projects.push({\n      name: name,\n      desc: '',\n      id: projectId\n    });\n    setDatabase(database);\n    setProjToDisplay([\n      {\n        name: 'All',\n        id: ALL_PROJECTS\n      },\n      ...database.projects.map(p => ({ name: p.name, id: p.id }))\n    ]);\n    setSelectedProject(projectId);\n    setProjectId(projectId + 1);\n  };\n\n  const deleteProject = (projectId: number) => {\n    database.projects = database.projects.filter(\n      (p: Project) => p.id !== projectId\n    );\n    database.tasks.forEach(\n      (t: Task) => t.projectId === projectId && (t.projectId = NO_PROJECT)\n    );\n    setDatabase(database);\n    setProjToDisplay([\n      {\n        name: 'All',\n        id: ALL_PROJECTS\n      },\n      ...database.projects.map(p => ({ name: p.name, id: p.id }))\n    ]);\n    setSelectedProject(ALL_PROJECTS);\n  };\n\n  const deleteProjectAlert = (\n    <DeleteAlert\n      confirmButtonText='Delete project'\n      isOpen={deleteProjAlertOpen}\n      onCancel={() => openDeleteProjAlert(false)}\n      onConfirm={() => {\n        openDeleteProjAlert(false);\n        deleteProject(selectedProject);\n      }}\n      deletionTargetName={\n        projToDisplay.find(\n          (p: { name: string; id: number }) => p.id === selectedProject\n        )!.name\n      }\n    />\n  );\n\n  const addProjectDialog = (\n    <AddDialog\n      isOpen={addProjDialogOpen}\n      handleConfirm={() => addProject('Test' + projectId)}\n      handleClose={() => openAddProjDialog(false)}\n    />\n  );\n\n  return (\n    <div className={theme} id='container'>\n      <Navbar\n        theme={theme}\n        switchTheme={switchTheme}\n        dumpDataBase={() => console.log(database)}\n        setSelectedProject={setSelectedProject}\n        projects={projToDisplay}\n        deleteProject={deleteProject}\n        selectedProject={selectedProject}\n        openDeleteProjAlert={openDeleteProjAlert}\n        openAddProjDialog={openAddProjDialog}\n      />\n      <div id='content'>\n        <h2>Tasks</h2>\n        <ul>\n          {database.tasks\n            .filter(\n              t =>\n                t.projectId === selectedProject ||\n                (selectedProject === ALL_PROJECTS && t.projectId !== NO_PROJECT)\n            )\n            .map(task => (\n              <li key={task.id}>\n                {task.title}\n                <small>\n                  {' '}\n                  {task.desc} -- ({task.duration} days)\n                </small>\n              </li>\n            ))}\n        </ul>\n        <h3>\n          Orphan tasks\n          <Button onClick={() => setShowOrphan(!showOrphan)}>\n            {showOrphan ? 'Hide' : 'Show'}\n          </Button>\n        </h3>\n        {showOrphan && (\n          <ul>\n            {database.tasks\n              .filter(t => t.projectId === NO_PROJECT)\n              .map(task => (\n                <li key={task.id}>\n                  {task.title}\n                  <small>\n                    {' '}\n                    {task.desc} -- ({task.duration} days)\n                  </small>\n                </li>\n              ))}\n          </ul>\n        )}\n        <h2>Planning</h2>\n        {/* TODO create/edit project/task, planning, save/load database (JSON, localstorage...), styles */}\n      </div>\n      {deleteProjectAlert}\n      {addProjectDialog}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'normalize.css';\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\nimport '@blueprintjs/datetime/lib/css/blueprint-datetime.css';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}